[{"C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\index.js":"1","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\App.js":"2","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\LandingPage.js":"3","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\RegisterPage.js":"4","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\LoginPage.js":"5","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\ForgetPasswordPage.js":"6","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\ResponseForm.js":"7","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\utils\\APIRoutes.js":"8","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\Navbar.js":"9","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\CreateForm.js":"10","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\Forms.js":"11","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\utils\\fetchData.js":"12","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\ViewForm.js":"13","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\EditForm.js":"14"},{"size":151,"mtime":1681927853475,"results":"15","hashOfConfig":"16"},{"size":1638,"mtime":1682352681784,"results":"17","hashOfConfig":"16"},{"size":1179,"mtime":1682446273687,"results":"18","hashOfConfig":"16"},{"size":4147,"mtime":1682443648316,"results":"19","hashOfConfig":"16"},{"size":3848,"mtime":1682443546628,"results":"20","hashOfConfig":"16"},{"size":922,"mtime":1681927853468,"results":"21","hashOfConfig":"16"},{"size":8224,"mtime":1682358304021,"results":"22","hashOfConfig":"16"},{"size":701,"mtime":1691852775861,"results":"23","hashOfConfig":"16"},{"size":1158,"mtime":1682444022140,"results":"24","hashOfConfig":"16"},{"size":14908,"mtime":1682445648599,"results":"25","hashOfConfig":"16"},{"size":4804,"mtime":1682444354534,"results":"26","hashOfConfig":"16"},{"size":322,"mtime":1682242151882,"results":"27","hashOfConfig":"16"},{"size":7930,"mtime":1682445707985,"results":"28","hashOfConfig":"16"},{"size":15243,"mtime":1682445584537,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n72bfo",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\index.js",[],[],"C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\App.js",["81","82","83","84"],[],"import React, { useState } from 'react';\r\nimport { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';\r\n\r\nimport LandingPage from './components/pages/LandingPage';\r\nimport LoginPage from './components/pages/LoginPage';\r\nimport RegisterPage from './components/pages/RegisterPage';\r\nimport ForgetPasswordPage from './components/pages/ForgetPasswordPage';\r\nimport CreateForm from './components/pages/CreateForm';\r\nimport ResponseForm from './components/pages/ResponseForm';\r\nimport Forms from './components/pages/Forms';\r\nimport EditForm from './components/pages/EditForm';\r\nimport ViewForm from './components/pages/ViewForm';\r\n\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n    const [user, setUser] = useState(null);\r\n    const [formData, setFormData] = useState(null);\r\n    return (\r\n        <BrowserRouter>\r\n            <Routes>\r\n                <Route\r\n                    path=\"/login\"\r\n                    element={<LoginPage setUser={setUser} />}\r\n                />\r\n                <Route path=\"/register\" element={<RegisterPage />} />\r\n                <Route path=\"/\" exact element={<LandingPage />} />\r\n\r\n                <Route\r\n                    path=\"/create-form\"\r\n                    element={<CreateForm setFormData={setFormData} />}\r\n                />\r\n                <Route path=\"/forms/:id\" element={<ViewForm />} />\r\n                <Route path=\"/forms/edit/:id\" element={<EditForm />} />\r\n                <Route path=\"/forms\" element={<Forms />} />\r\n                <Route path=\"/response-form/:id\" element={<ResponseForm />} />\r\n            </Routes>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\LandingPage.js",[],[],[],"C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\RegisterPage.js",["85","86","87","88","89","90","91","92","93","94"],[],"import React, { useState, useEffect } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { RegisterAPI } from '../../utils/APIRoutes';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../App.css';\r\n\r\nexport default function SignUpPage() {\r\n    const navigate = useNavigate();\r\n    const [username, setUsername] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const toastOptions = {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        pauseOnHover: true,\r\n        theme: 'colored',\r\n        draggable: true,\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('user')) {\r\n            navigate('/form');\r\n        }\r\n    });\r\n    const submitForm = async (e) => {\r\n        e.preventDefault();\r\n        if (validate()) {\r\n            const response = await fetch(RegisterAPI, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ username, email, password }),\r\n            });\r\n            const data = await response.json();\r\n            if (data.status === true) {\r\n                navigate('/login');\r\n            } else {\r\n                toast.error(data.message, toastOptions);\r\n            }\r\n        }\r\n    };\r\n    const validate = () => {\r\n        const regex =\r\n            /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n\r\n        if (username.length === 0) {\r\n            toast.error('Username is required.', toastOptions);\r\n            return false;\r\n        } else if (!email || regex.test(email) === false) {\r\n            toast.error('Email is not Valid.', toastOptions);\r\n            return false;\r\n        } else if (!password) {\r\n            toast.error('Password is required.', toastOptions);\r\n            return false;\r\n        } else if (password.length < 6) {\r\n            toast.error(\r\n                'Password must be equal or greater than 6 characters.',\r\n                toastOptions\r\n            );\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"text-center m-5-auto\">\r\n                <h5>Create your personal account</h5>\r\n                <form className=\"space-y-4\" onSubmit={(e) => submitForm(e)}>\r\n                    <p>\r\n                        <label>Username</label>\r\n                        <br />\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            onChange={(e) => setUsername(e.target.value)}\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <label>Email address</label>\r\n                        <br />\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <label>Password</label>\r\n                        <br />\r\n                        <input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </p>\r\n\r\n                    <p>\r\n                        <button id=\"sub_btn\" type=\"submit\">\r\n                            Register\r\n                        </button>\r\n                    </p>\r\n                    <p>\r\n                        <Link to=\"/login\">I am already a member</Link>.\r\n                    </p>\r\n                </form>\r\n                <footer>\r\n                    <p>\r\n                        <Link to=\"/\">Back to Homepage</Link>.\r\n                    </p>\r\n                </footer>\r\n            </div>\r\n\r\n            <ToastContainer />\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\LoginPage.js",["95","96","97","98","99","100","101","102","103","104"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { LoginAPI } from '../../utils/APIRoutes';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport '../../App.css';\r\n\r\nexport default function LoginPage({ setUser }) {\r\n    const navigate = useNavigate();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const toastOptions = {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        pauseOnHover: true,\r\n        theme: 'colored',\r\n        draggable: true,\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('user')) {\r\n            navigate('/forms');\r\n        }\r\n    });\r\n    const submitForm = async (e) => {\r\n        e.preventDefault();\r\n        if (validate()) {\r\n            const response = await fetch(LoginAPI, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email, password }),\r\n            });\r\n            const data = await response.json();\r\n            if (data.status === true) {\r\n                setUser(data);\r\n                localStorage.setItem(\r\n                    'user',\r\n                    JSON.stringify({\r\n                        token: data.access_token,\r\n                        userId: data.user._id,\r\n                    })\r\n                );\r\n\r\n                navigate('/forms');\r\n            } else {\r\n                toast.error(data.message, toastOptions);\r\n            }\r\n        }\r\n    };\r\n    const validate = () => {\r\n        const regex =\r\n            /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n\r\n        if (!email || !password) {\r\n            toast.error('Email and Password are required.', toastOptions);\r\n            return false;\r\n        } else if (regex.test(email) === false) {\r\n            toast.error('Email is not Valid.', toastOptions);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"text-center m-5-auto\">\r\n                <h2 className=\"text-3xl font-bold\">LOGIN</h2>\r\n                <form className=\"space-y-4\" onSubmit={(e) => submitForm(e)}>\r\n                    <p>\r\n                        <label>Email address</label>\r\n                        <br />\r\n                        <input\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <label>Password</label>\r\n                        {/* <Link to=\"/forget-password\"><label className=\"right-label\">Forget password?</label></Link> */}\r\n                        <br />\r\n                        <input\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                    </p>\r\n                    <p>\r\n                        <button id=\"sub_btn\" type=\"submit\">\r\n                            Login\r\n                        </button>\r\n                    </p>\r\n                </form>\r\n\r\n                <footer>\r\n                    <p>\r\n                        First time?{' '}\r\n                        <Link to=\"/register\">Create an account</Link>.\r\n                    </p>\r\n                    <p>\r\n                        <Link to=\"/\">Back to Homepage</Link>.\r\n                    </p>\r\n                </footer>\r\n            </div>\r\n            <ToastContainer />\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\ForgetPasswordPage.js",[],[],"C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\ResponseForm.js",["105"],[],"import React, { useEffect, useState } from 'react';\r\nimport { GetFormAPI, CreateResponseFormAPI } from '../../utils/APIRoutes';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport callApi from '../../utils/fetchData';\r\n\r\nimport '../../App.css';\r\nimport Navbar from './Navbar';\r\n\r\nexport default function ResponseForm() {\r\n    const [elements, setElements] = useState(null);\r\n\r\n    const [values, setValues] = useState({});\r\n    const navigate = useNavigate();\r\n    const { id } = useParams();\r\n    const toastOptions = {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        pauseOnHover: true,\r\n        theme: 'colored',\r\n        draggable: true,\r\n    };\r\n\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (!user) {\r\n            navigate('/login');\r\n        }\r\n\r\n        async function fetchFormData() {\r\n            const form = await callApi(\r\n                `${GetFormAPI}/${id}`,\r\n                'GET',\r\n                user.token\r\n            );\r\n            if (form.status === true) {\r\n                setElements(form.form);\r\n            } else if (form.message === 'Unauthorized') {\r\n                toast.error(form.message, toastOptions);\r\n                navigate('/login');\r\n            } else {\r\n                toast.error(form.message, toastOptions);\r\n            }\r\n        }\r\n\r\n        fetchFormData();\r\n    }, []);\r\n\r\n    const changeHandle = (e, label) => {\r\n        const { value } = e.target;\r\n        setValues({ ...values, [label]: value });\r\n    };\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        let data = [];\r\n        data.push(values);\r\n\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        const response = await fetch(CreateResponseFormAPI, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${user.token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                answers: data,\r\n                userId: user.userId,\r\n                formId: id,\r\n            }),\r\n        });\r\n        const responseForm = await response.json();\r\n        if (!responseForm.status) {\r\n            toast.error(responseForm.message, toastOptions);\r\n        } else {\r\n            toast.success(responseForm.message, toastOptions);\r\n            navigate('/forms');\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div className=\"container mx-auto w-2/3\">\r\n                <div className=\"flex flex-col px-4 bg-white rounded-md justify-center item-start w-full shadow-sm border-indigo-800 border-t-8 space-y-2 h-24\">\r\n                    <h1 className=\"text-3xl font-semibold\">\r\n                        {elements?.title}\r\n                    </h1>\r\n                    <p className=\"text-gray-500/80\">{elements?.description}</p>\r\n                </div>\r\n                <form\r\n                    onSubmit={(e) => handleSubmit(e)}\r\n                    className=\" flex flex-col  space-y-4\"\r\n                >\r\n                    {elements?.formFields?.map((field) => {\r\n                        return (\r\n                            <div\r\n                                key={field.name}\r\n                                className=\"flex justify-between items-center space-y-4\"\r\n                            >\r\n                                {field.question_type === 'short_answer' ? (\r\n                                    <div className=\"block space-y-2 flex flex-col text-sm font-medium text-gray-700 capitalize w-full\">\r\n                                        <label htmlFor=\"\">{field.label}</label>\r\n                                        <input\r\n                                            className=\"pl-3 shadow-sm h-10 rounded-md block w-full text-xl\"\r\n                                            name={field.name}\r\n                                            type=\"text\"\r\n                                            required\r\n                                            onChange={(e) =>\r\n                                                changeHandle(e, field.label)\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                ) : field.question_type === 'paragraph' ? (\r\n                                    <div\r\n                                        key={field.name}\r\n                                        className=\"block space-y-2 flex flex-col text-sm font-medium text-gray-700 capitalize\"\r\n                                    >\r\n                                        <label htmlFor=\"\">{field.label}</label>\r\n                                        <textarea\r\n                                            name={field.name}\r\n                                            required\r\n                                            className=\"p-1 shadow-sm h-10 rounded-md block w-full\"\r\n                                            id=\"\"\r\n                                            rows=\"10\"\r\n                                            cols=\"60\"\r\n                                            onChange={(e) =>\r\n                                                changeHandle(e, field.label)\r\n                                            }\r\n                                        ></textarea>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div className=\"block space-y-2 flex flex-col text-sm font-medium text-gray-700 capitalize\">\r\n                                        <label htmlFor=\"\">{field.label}</label>\r\n                                        {field.list.map((item) => {\r\n                                            return (\r\n                                                <div\r\n                                                    key={item}\r\n                                                    className=\"flex items-center mb-4\"\r\n                                                >\r\n                                                    <input\r\n                                                        className=\"h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300\"\r\n                                                        type=\"radio\"\r\n                                                        id={item}\r\n                                                        value={item}\r\n                                                        name={field.name}\r\n                                                        onChange={(e) =>\r\n                                                            changeHandle(\r\n                                                                e,\r\n                                                                field.label\r\n                                                            )\r\n                                                        }\r\n                                                    />\r\n                                                    <label\r\n                                                        htmlFor={item}\r\n                                                        className=\"text-sm font-medium text-gray-900 ml-2 block\"\r\n                                                    >\r\n                                                        {item}\r\n                                                    </label>\r\n                                                </div>\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <button\r\n                        type=\"submit\"\r\n                        className=\"px-4 py-2 bg-indigo-600 hover:bg-indigo-700 rounded-md text-white\"\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </form>\r\n                <ToastContainer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\utils\\APIRoutes.js",[],[],"C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\Navbar.js",[],[],"C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\CreateForm.js",["106","107","108","109","110","111"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { PlusCircleIcon, TrashIcon } from '@heroicons/react/outline';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { CreateFormAPI, GetUserAPI } from '../../utils/APIRoutes';\r\nimport Navbar from './Navbar';\r\n\r\nexport default function CreateForm() {\r\n    const navigate = useNavigate();\r\n    const toastOptions = {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        pauseOnHover: true,\r\n        theme: 'colored',\r\n        draggable: true,\r\n    };\r\n    const [title, setTitle] = useState('Untitled Form');\r\n    const [description, setDescription] = useState('Form Description');\r\n    const [formContent, setFormContent] = useState([\r\n        {\r\n            id: 0,\r\n            name: '0',\r\n            label: 'Untitled Question',\r\n            required: false,\r\n            question_type: 'short_answer',\r\n            list: [],\r\n        },\r\n    ]);\r\n    const [onEdit, setOnEdit] = useState(false);\r\n    const [textField, setTextField] = useState('');\r\n    const [editedField, setEditedField] = useState('');\r\n\r\n    // let user;\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (!user) {\r\n            navigate('/login');\r\n        }\r\n    });\r\n\r\n    const addQuestion = () => {\r\n        const field = {\r\n            name: `question_${formContent.length}_${Math.floor(\r\n                Math.random() * 9999\r\n            )}`,\r\n            label: 'Untitled question',\r\n            required: false,\r\n            question_type: 'short_answer', // \"paragraph\", \"multichoice\",\r\n            list: [],\r\n            value: '',\r\n        };\r\n        setFormContent([...formContent, field]);\r\n    };\r\n\r\n    const editField = (fieldName, fieldLabel) => {\r\n        const formFields = [...formContent];\r\n        const fieldIndex = formFields.findIndex((f) => f.name === fieldName);\r\n        if (fieldIndex > -1) {\r\n            formFields[fieldIndex].label = fieldLabel;\r\n            setFormContent(formFields);\r\n        }\r\n    };\r\n\r\n    const editFieldType = (fieldName, fieldLabel) => {\r\n        const formFields = [...formContent];\r\n        const fieldIndex = formFields.findIndex((f) => f.name === fieldName);\r\n        if (fieldIndex > -1) {\r\n            formFields[fieldIndex].question_type = fieldLabel;\r\n            setFormContent(formFields);\r\n        }\r\n    };\r\n\r\n    const addFieldOption = (fieldName, option) => {\r\n        const formFields = [...formContent];\r\n        const fieldIndex = formFields.findIndex((f) => f.name === fieldName);\r\n        if (fieldIndex > -1) {\r\n            if (option && option != '') {\r\n                formFields[fieldIndex].list.push(option);\r\n                setFormContent(formFields);\r\n                setTextField('');\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeField = (fieldName) => {\r\n        const formFields = [...formContent];\r\n        const fields = formFields.filter(\r\n            (formField) => formField.name !== fieldName\r\n        );\r\n        if (fields.length > 0) {\r\n            setFormContent(fields);\r\n        } else {\r\n            alert('There must be at least one question');\r\n        }\r\n        // console.log(fields.length);\r\n    };\r\n    const submitForm = async (e) => {\r\n        e.preventDefault();\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (!user) {\r\n            navigate('/login');\r\n        }\r\n\r\n        const response = await fetch(CreateFormAPI, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${user.token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                title,\r\n                description,\r\n                formFields: formContent,\r\n                userId: user.userId,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.status === true) {\r\n            navigate(`/response-form/${data.form._id}`);\r\n            console.log(data);\r\n        } else {\r\n            toast.error(data.message, toastOptions);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {' '}\r\n            <Navbar />\r\n            <div className=\"container mx-auto flex flex-col justify-start items-center px-4 h-screen sm:w-4/5 space-y-4\">\r\n                <div className=\"flex flex-col px-4 bg-white rounded-md justify-center item-start w-full shadow-sm border-indigo-800 border-t-8 space-y-2 h-24\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"text-3xl font-semibold w-full\"\r\n                        placeholder=\"\"\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"text-gray-500/80\"\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\" relative flex flex-col w-full space-y-4\">\r\n                    {formContent.map((field) => {\r\n                        return (\r\n                            <div\r\n                                key={field.name}\r\n                                className=\"rounded-md bg-white flex w-full shadow-md px-4\"\r\n                            >\r\n                                <div className=\"flex flex-col w-full\">\r\n                                    <div className=\"flex justify-between items-center space-y-2\">\r\n                                        <div\r\n                                            key={field.name}\r\n                                            className=\"block text-sm font-medium text-gray-700 capitalize\"\r\n                                        >\r\n                                            {onEdit &&\r\n                                            editedField === field.name ? (\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"border border-black\"\r\n                                                    value={field.label}\r\n                                                    onChange={(e) =>\r\n                                                        editField(\r\n                                                            field.name,\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                    onBlur={() => {\r\n                                                        setOnEdit(false);\r\n                                                        setEditedField('');\r\n                                                    }}\r\n                                                />\r\n                                            ) : (\r\n                                                <label\r\n                                                    onClick={() => {\r\n                                                        setOnEdit(true);\r\n                                                        setEditedField(\r\n                                                            field.name\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    {field.label}\r\n                                                </label>\r\n                                            )}\r\n                                        </div>\r\n                                        <div>\r\n                                            <select\r\n                                                onChange={(e) =>\r\n                                                    editFieldType(\r\n                                                        field.name,\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }\r\n                                            >\r\n                                                <option value=\"short_answer\">\r\n                                                    Short Answer\r\n                                                </option>\r\n                                                <option value=\"paragraph\">\r\n                                                    Paragraph\r\n                                                </option>\r\n                                                <option value=\"multichoice\">\r\n                                                    Multichoice\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"my-4 w-full\">\r\n                                        {field.question_type ==\r\n                                            'short_answer' && (\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"px-5 shadow-sm h-10 rounded-md block w-full\"\r\n                                                placeholder={field.label}\r\n                                            />\r\n                                        )}\r\n                                        {field.question_type == 'paragraph' && (\r\n                                            <textarea\r\n                                                rows={4}\r\n                                                className=\"px-5 shadow-sm h-10 rounded-md block w-full\"\r\n                                                placeholder={field.label}\r\n                                            />\r\n                                        )}\r\n                                        {field.question_type ==\r\n                                            'multichoice' && (\r\n                                            <div className=\"my-4 flex flex-col space-y-2\">\r\n                                                <select className=\"px-5 shadow-sm h-10 rounded-md block w-full\">\r\n                                                    {field.list.map((item) => (\r\n                                                        <option\r\n                                                            key={item}\r\n                                                            value={item}\r\n                                                        >\r\n                                                            {item}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                                <div className=\"flex space-between\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        onChange={(e) =>\r\n                                                            setTextField(\r\n                                                                e.target.value\r\n                                                            )\r\n                                                        }\r\n                                                        value={textField}\r\n                                                        placeholder=\"Add an option\"\r\n                                                        className=\"flex-1\"\r\n                                                    />\r\n                                                    <button\r\n                                                        className=\"bg-indigo-700 block hover:bg-indigo-900 text-white px-4\"\r\n                                                        onClick={() =>\r\n                                                            addFieldOption(\r\n                                                                field.name,\r\n                                                                textField\r\n                                                            )\r\n                                                        }\r\n                                                    >\r\n                                                        Add\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <button\r\n                                            onClick={() =>\r\n                                                removeField(field.name)\r\n                                            }\r\n                                        >\r\n                                            <TrashIcon className=\" w-6 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\" absolute space-y-1 top-0 -right-6 sm:-right-14 flex flex-col justify-between items-center bg-white p-2 rounded-md shadow-md\">\r\n                        <button onClick={() => addQuestion()}>\r\n                            <PlusCircleIcon className=\"w-6 h-6 sm:w-8 sm:h-8 text-gray-400 hover:text-indigo-500\" />\r\n                        </button>\r\n                        {/* <button onClick={() => addQuestion()}>\r\n                        <PlusCircleIcon className=\"w-8 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                    </button>\r\n                    <button onClick={() => addQuestion()}>\r\n                        <PlusCircleIcon className=\"w-8 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                    </button> */}\r\n                    </div>\r\n                    <button\r\n                        className=\"mb-4 bg-indigo-600 px-4 py-2 hover:bg-indigo-700 rounded-md text-white\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => submitForm(e)}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                </div>\r\n\r\n                <ToastContainer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\Forms.js",["112","113"],[],"import React, { useEffect, useState } from 'react';\r\nimport Navbar from './Navbar';\r\nimport callAPI from '../../utils/fetchData';\r\nimport { GetFormsAPI, deleteFormAPI } from '../../utils/APIRoutes';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function Forms() {\r\n    const navigate = useNavigate();\r\n    const [forms, setForms] = useState([]);\r\n\r\n    const toastOptions = {\r\n        position: 'bottom-right',\r\n        autoClose: 3000,\r\n        pauseOnHover: true,\r\n        theme: 'colored',\r\n        draggable: true,\r\n    };\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (!user) {\r\n            navigate('/login');\r\n        }\r\n        const fetchForms = async () => {\r\n            const forms = await callAPI(GetFormsAPI, 'GET', user.token);\r\n            if (forms.status === true) {\r\n                setForms(forms.forms);\r\n            } else if (forms.statusCode == 404) {\r\n                setForms([{ msg: 'No Forms Found, Please create one' }]);\r\n            } else {\r\n                localStorage.removeItem('user');\r\n                navigate('/login');\r\n            }\r\n        };\r\n        fetchForms();\r\n    }, []);\r\n\r\n    const deleteForm = async (formId) => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        const result = await callAPI(\r\n            `${deleteFormAPI}/${formId}`,\r\n            'DELETE',\r\n            user.token\r\n        );\r\n        if (result.status === true) {\r\n            toast.success(result.message, toastOptions);\r\n            setForms(forms.filter((form) => form._id !== formId));\r\n        } else {\r\n            toast.error(result.message, toastOptions);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Navbar />\r\n\r\n            {forms[0]?.msg !== undefined ? (\r\n                <div>\r\n                    <h1 className=\"flex items-center justify-center h-screen font-bold text-xl\">\r\n                        {forms[0].msg}\r\n                    </h1>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <div className=\"md:container md:mx-auto mt-4 flex flex-col justify-center items-center\">\r\n                        {forms.map((form) => {\r\n                            return (\r\n                                <div\r\n                                    key={form._id}\r\n                                    className=\"shadow-md  sm:w-2/3 px-4 py-3 mb-8 rounded-sm space-y-4\"\r\n                                >\r\n                                    <h2 className=\"font-bold text-xl\">\r\n                                        {form.title}\r\n                                    </h2>\r\n                                    <p className=\"text-gray-500 text-sm pl-2\">\r\n                                        {form.description}\r\n                                    </p>\r\n                                    <div className=\"flex justify-end gap-4 text-white flex-wrap\">\r\n                                        <button\r\n                                            className=\"outline-0 bg-red-400 hover:bg-red-600 px-4 py-1 rounded-sm\"\r\n                                            onClick={() => deleteForm(form._id)}\r\n                                        >\r\n                                            Delete\r\n                                        </button>\r\n                                        <button\r\n                                            className=\"bg-violet-500 hover:bg-violet-600 px-3 py-1 rounded-sm\"\r\n                                            onClick={() =>\r\n                                                navigate(\r\n                                                    `/forms/edit/${form._id}`\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            Edit\r\n                                        </button>\r\n                                        <button\r\n                                            className=\"bg-violet-500 hover:bg-violet-600 px-3 py-1 rounded-sm\"\r\n                                            onClick={() =>\r\n                                                navigate(`/forms/${form._id}`)\r\n                                            }\r\n                                        >\r\n                                            View\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <ToastContainer />\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\utils\\fetchData.js",[],[],"C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\ViewForm.js",["114","115","116","117","118","119","120","121","122","123","124","125","126","127"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport { PlusCircleIcon, TrashIcon } from '@heroicons/react/outline';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { GetFormAPI } from '../../utils/APIRoutes';\r\nimport callAPI from '../../utils/fetchData';\r\nimport Navbar from './Navbar';\r\n\r\nexport default function EditForm({ setFormData }) {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const toastOptions = {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        pauseOnHover: true,\r\n        theme: 'colored',\r\n        draggable: true,\r\n    };\r\n    const [title, setTitle] = useState('Untitled Form');\r\n    const [description, setDescription] = useState('Form Description');\r\n    const [formContent, setFormContent] = useState([]);\r\n    const [onEdit, setOnEdit] = useState(false);\r\n    const [textField, setTextField] = useState('');\r\n    const [editedField, setEditedField] = useState('');\r\n\r\n    // let user;\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (!user) {\r\n            navigate('/login');\r\n        }\r\n\r\n        const fetchForm = async () => {\r\n            const form = await callAPI(\r\n                `${GetFormAPI}/${id}`,\r\n                'GET',\r\n                user.token\r\n            );\r\n            if (form.status == true) {\r\n                setTitle(form.form.title);\r\n                setDescription(form.form.description);\r\n                setFormContent(form.form.formFields);\r\n            }\r\n        };\r\n        fetchForm();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {' '}\r\n            <Navbar />\r\n            <div className=\"container mx-auto  flex flex-col justify-start items-center px-4 h-screen sm:w-4/5 space-y-4\">\r\n                <div className=\"flex flex-col px-4 bg-white rounded-md justify-center item-start w-full shadow-sm border-indigo-800 border-t-8 space-y-2 h-24\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"text-3xl font-semibold\"\r\n                        placeholder=\"\"\r\n                        value={title}\r\n                        readOnly\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"text-gray-500/80 w-full\"\r\n                        value={description}\r\n                        readOnly\r\n                    />\r\n                </div>\r\n\r\n                <div className=\" relative flex flex-col w-full space-y-4\">\r\n                    {formContent.map((field) => {\r\n                        return (\r\n                            <div\r\n                                key={field.name}\r\n                                className=\"rounded-md bg-white flex w-full shadow-md px-4\"\r\n                            >\r\n                                <div className=\"flex flex-col w-full\">\r\n                                    <div className=\"flex justify-between items-center space-y-2\">\r\n                                        <div\r\n                                            key={field.name}\r\n                                            className=\"block text-sm font-medium text-gray-700 capitalize\"\r\n                                        >\r\n                                            {onEdit &&\r\n                                            editedField === field.name ? (\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"border border-black\"\r\n                                                    value={field.label}\r\n                                                    readOnly\r\n                                                />\r\n                                            ) : (\r\n                                                <label>{field.label}</label>\r\n                                            )}\r\n                                        </div>\r\n                                        <div>\r\n                                            <p>{field.question_type}</p>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"my-4 w-full\">\r\n                                        {field.question_type ==\r\n                                            'short_answer' && (\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"px-5 shadow-sm h-10 rounded-md block w-full\"\r\n                                                placeholder={field.label}\r\n                                                readOnly\r\n                                            />\r\n                                        )}\r\n                                        {field.question_type == 'paragraph' && (\r\n                                            <textarea\r\n                                                rows={4}\r\n                                                className=\"px-5 shadow-sm h-10 rounded-md block w-full\"\r\n                                                placeholder={field.label}\r\n                                                readOnly\r\n                                            />\r\n                                        )}\r\n                                        {field.question_type ==\r\n                                            'multichoice' && (\r\n                                            <div className=\"my-4 flex flex-col space-y-2\">\r\n                                                <select className=\"px-5 shadow-sm h-10 rounded-md block w-full\">\r\n                                                    {field.list.map((item) => (\r\n                                                        <option\r\n                                                            key={item}\r\n                                                            value={item}\r\n                                                        >\r\n                                                            {item}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {/* <div className=\" absolute space-y-1 top-0 -right-16 flex flex-col justify-between items-center bg-white p-2 rounded-md shadow-md\">\r\n                        <button onClick={() => addQuestion()}>\r\n                            <PlusCircleIcon className=\"w-8 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                        </button> */}\r\n                    {/* <button onClick={() => addQuestion()}>\r\n                        <PlusCircleIcon className=\"w-8 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                    </button>\r\n                    <button onClick={() => addQuestion()}>\r\n                        <PlusCircleIcon className=\"w-8 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                    </button> */}\r\n                    {/* </div> */}\r\n                    <button\r\n                        className=\"bg-indigo-600 px-4 py-2 hover:bg-indigo-700 rounded-md text-white\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => navigate(`/forms/edit/${id}`)}\r\n                    >\r\n                        Edit\r\n                    </button>\r\n                </div>\r\n\r\n                <ToastContainer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","C:\\Users\\heret\\OneDrive\\Desktop\\api\\frontend-google-form\\src\\components\\pages\\EditForm.js",["128","129","130","131","132","133","134","135"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport { PlusCircleIcon, TrashIcon } from '@heroicons/react/outline';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n    CreateFormAPI,\r\n    updateFormAPI,\r\n    GetFormAPI,\r\n} from '../../utils/APIRoutes';\r\nimport callAPI from '../../utils/fetchData';\r\nimport Navbar from './Navbar';\r\n\r\nexport default function EditForm({ setFormData }) {\r\n    const { id } = useParams();\r\n    const navigate = useNavigate();\r\n    const toastOptions = {\r\n        position: 'bottom-right',\r\n        autoClose: 5000,\r\n        pauseOnHover: true,\r\n        theme: 'colored',\r\n        draggable: true,\r\n    };\r\n    const [title, setTitle] = useState('Untitled Form');\r\n    const [description, setDescription] = useState('Form Description');\r\n    const [formContent, setFormContent] = useState([]);\r\n    const [onEdit, setOnEdit] = useState(false);\r\n    const [textField, setTextField] = useState('');\r\n    const [editedField, setEditedField] = useState('');\r\n\r\n    // let user;\r\n    useEffect(() => {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (!user) {\r\n            navigate('/login');\r\n        }\r\n\r\n        const fetchForm = async () => {\r\n            const form = await callAPI(\r\n                `${GetFormAPI}/${id}`,\r\n                'GET',\r\n                user.token\r\n            );\r\n            if (form.status == true) {\r\n                setTitle(form.form.title);\r\n                setDescription(form.form.description);\r\n                setFormContent(form.form.formFields);\r\n                console.log(form.form);\r\n            }\r\n        };\r\n        fetchForm();\r\n    }, []);\r\n\r\n    const addQuestion = () => {\r\n        const field = {\r\n            name: `question_${formContent.length}${Math.floor(\r\n                Math.random() * 9999\r\n            )}`,\r\n            label: 'Untitled question',\r\n            required: false,\r\n            question_type: 'short_answer', // \"paragraph\", \"multichoice\",\r\n            list: [],\r\n            value: '',\r\n        };\r\n        setFormContent([...formContent, field]);\r\n    };\r\n\r\n    const editField = (fieldName, fieldLabel) => {\r\n        const formFields = [...formContent];\r\n        const fieldIndex = formFields.findIndex((f) => f.name === fieldName);\r\n        if (fieldIndex > -1) {\r\n            formFields[fieldIndex].label = fieldLabel;\r\n            setFormContent(formFields);\r\n        }\r\n    };\r\n\r\n    const editFieldType = (fieldName, fieldLabel) => {\r\n        const formFields = [...formContent];\r\n        const fieldIndex = formFields.findIndex((f) => f.name === fieldName);\r\n        if (fieldIndex > -1) {\r\n            formFields[fieldIndex].question_type = fieldLabel;\r\n            setFormContent(formFields);\r\n        }\r\n    };\r\n\r\n    const addFieldOption = (fieldName, option) => {\r\n        const formFields = [...formContent];\r\n        const fieldIndex = formFields.findIndex((f) => f.name === fieldName);\r\n        if (fieldIndex > -1) {\r\n            if (option && option != '') {\r\n                formFields[fieldIndex].list.push(option);\r\n                setFormContent(formFields);\r\n                setTextField('');\r\n            }\r\n        }\r\n    };\r\n\r\n    const removeField = (fieldName) => {\r\n        const formFields = [...formContent];\r\n        const fields = formFields.filter(\r\n            (formField) => formField.name !== fieldName\r\n        );\r\n        if (fields.length > 0) {\r\n            setFormContent(fields);\r\n        } else {\r\n            alert('There must be at least one question');\r\n        }\r\n    };\r\n    const submitForm = async (e) => {\r\n        e.preventDefault();\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (!user) {\r\n            navigate('/login');\r\n        }\r\n\r\n        const response = await fetch(`${updateFormAPI}/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${user.token}`,\r\n            },\r\n            body: JSON.stringify({\r\n                title,\r\n                description,\r\n                formFields: formContent,\r\n            }),\r\n        });\r\n        const data = await response.json();\r\n        if (data.status === true) {\r\n            navigate('/forms');\r\n            toast.success(data.message, toastOptions);\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {' '}\r\n            <Navbar />\r\n            <div className=\"container mx-auto flex flex-col justify-start items-center px-4 h-screen sm:w-4/5 space-y-4\">\r\n                <div className=\"flex flex-col px-4 bg-white rounded-md justify-center item-start w-full shadow-sm border-indigo-800 border-t-8 space-y-2 h-24\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"text-3xl font-semibold\"\r\n                        placeholder=\"\"\r\n                        value={title}\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"text-gray-500/80\"\r\n                        value={description}\r\n                        onChange={(e) => setDescription(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\" relative flex flex-col w-full space-y-4\">\r\n                    {formContent.map((field) => {\r\n                        return (\r\n                            <div\r\n                                key={field.name}\r\n                                className=\"rounded-md bg-white flex w-full shadow-md px-4\"\r\n                            >\r\n                                <div className=\"flex flex-col w-full\">\r\n                                    <div className=\"flex justify-between items-center space-y-2\">\r\n                                        <div\r\n                                            key={field.name}\r\n                                            className=\"block text-sm font-medium text-gray-700 capitalize\"\r\n                                        >\r\n                                            {onEdit &&\r\n                                            editedField === field.name ? (\r\n                                                <input\r\n                                                    type=\"text\"\r\n                                                    className=\"border border-black\"\r\n                                                    value={field.label}\r\n                                                    onChange={(e) =>\r\n                                                        editField(\r\n                                                            field.name,\r\n                                                            e.target.value\r\n                                                        )\r\n                                                    }\r\n                                                    onBlur={() => {\r\n                                                        setOnEdit(false);\r\n                                                        setEditedField('');\r\n                                                    }}\r\n                                                />\r\n                                            ) : (\r\n                                                <label\r\n                                                    onClick={() => {\r\n                                                        setOnEdit(true);\r\n                                                        setEditedField(\r\n                                                            field.name\r\n                                                        );\r\n                                                    }}\r\n                                                >\r\n                                                    {field.label}\r\n                                                </label>\r\n                                            )}\r\n                                        </div>\r\n                                        <div>\r\n                                            <select\r\n                                                onChange={(e) =>\r\n                                                    editFieldType(\r\n                                                        field.name,\r\n                                                        e.target.value\r\n                                                    )\r\n                                                }\r\n                                                value={field.question_type}\r\n                                            >\r\n                                                <option value=\"short_answer\">\r\n                                                    Short Answer\r\n                                                </option>\r\n                                                <option value=\"paragraph\">\r\n                                                    Paragraph\r\n                                                </option>\r\n                                                <option value=\"multichoice\">\r\n                                                    Multichoice\r\n                                                </option>\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"my-4 w-full\">\r\n                                        {field.question_type ==\r\n                                            'short_answer' && (\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"px-5 shadow-sm h-10 rounded-md block w-full\"\r\n                                                placeholder={field.label}\r\n                                            />\r\n                                        )}\r\n                                        {field.question_type == 'paragraph' && (\r\n                                            <textarea\r\n                                                rows={4}\r\n                                                className=\"px-5 shadow-sm h-10 rounded-md block w-full\"\r\n                                                placeholder={field.label}\r\n                                            />\r\n                                        )}\r\n                                        {field.question_type ==\r\n                                            'multichoice' && (\r\n                                            <div className=\"my-4 flex flex-col space-y-2\">\r\n                                                <select className=\"px-5 shadow-sm h-10 rounded-md block w-full\">\r\n                                                    {field.list.map((item) => (\r\n                                                        <option\r\n                                                            key={item}\r\n                                                            value={item}\r\n                                                        >\r\n                                                            {item}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </select>\r\n                                                <div className=\"flex space-between\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        onChange={(e) =>\r\n                                                            setTextField(\r\n                                                                e.target.value\r\n                                                            )\r\n                                                        }\r\n                                                        value={textField}\r\n                                                        placeholder=\"Add an option\"\r\n                                                        className=\"flex-1\"\r\n                                                    />\r\n                                                    <button\r\n                                                        className=\"bg-indigo-700 block hover:bg-indigo-900 text-white px-4\"\r\n                                                        onClick={() =>\r\n                                                            addFieldOption(\r\n                                                                field.name,\r\n                                                                textField\r\n                                                            )\r\n                                                        }\r\n                                                    >\r\n                                                        Add\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <button\r\n                                            onClick={() =>\r\n                                                removeField(field.name)\r\n                                            }\r\n                                        >\r\n                                            <TrashIcon className=\" w-6 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\" absolute space-y-1 top-0 -right-6 sm:-right-14 flex flex-col justify-between items-center bg-white p-2 rounded-md shadow-md\">\r\n                        <button onClick={() => addQuestion()}>\r\n                            <PlusCircleIcon className=\"w-6 h-6 sm:w-8 sm:h-8 text-gray-400 hover:text-indigo-500\" />\r\n                        </button>\r\n                        {/* <button onClick={() => addQuestion()}>\r\n                        <PlusCircleIcon className=\"w-8 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                    </button>\r\n                    <button onClick={() => addQuestion()}>\r\n                        <PlusCircleIcon className=\"w-8 h-8 text-gray-400 hover:text-indigo-500\" />\r\n                    </button> */}\r\n                    </div>\r\n                    <button\r\n                        className=\"mb-4 bg-indigo-600 px-4 py-2 hover:bg-indigo-700 rounded-md text-white\"\r\n                        type=\"submit\"\r\n                        onClick={(e) => submitForm(e)}\r\n                    >\r\n                        Update\r\n                    </button>\r\n                </div>\r\n\r\n                <ToastContainer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n",{"ruleId":"136","severity":1,"message":"137","line":2,"column":40,"nodeType":"138","messageId":"139","endLine":2,"endColumn":48},{"ruleId":"136","severity":1,"message":"140","line":7,"column":8,"nodeType":"138","messageId":"139","endLine":7,"endColumn":26},{"ruleId":"136","severity":1,"message":"141","line":17,"column":12,"nodeType":"138","messageId":"139","endLine":17,"endColumn":16},{"ruleId":"136","severity":1,"message":"142","line":18,"column":12,"nodeType":"138","messageId":"139","endLine":18,"endColumn":20},{"ruleId":"143","severity":1,"message":"144","line":47,"column":26,"nodeType":"145","messageId":"146","endLine":47,"endColumn":27,"suggestions":"147"},{"ruleId":"143","severity":1,"message":"148","line":47,"column":34,"nodeType":"145","messageId":"146","endLine":47,"endColumn":35,"suggestions":"149"},{"ruleId":"143","severity":1,"message":"144","line":47,"column":50,"nodeType":"145","messageId":"146","endLine":47,"endColumn":51,"suggestions":"150"},{"ruleId":"143","severity":1,"message":"148","line":47,"column":58,"nodeType":"145","messageId":"146","endLine":47,"endColumn":59,"suggestions":"151"},{"ruleId":"143","severity":1,"message":"148","line":47,"column":67,"nodeType":"145","messageId":"146","endLine":47,"endColumn":68,"suggestions":"152"},{"ruleId":"143","severity":1,"message":"148","line":47,"column":71,"nodeType":"145","messageId":"146","endLine":47,"endColumn":72,"suggestions":"153"},{"ruleId":"143","severity":1,"message":"144","line":47,"column":87,"nodeType":"145","messageId":"146","endLine":47,"endColumn":88,"suggestions":"154"},{"ruleId":"143","severity":1,"message":"148","line":47,"column":95,"nodeType":"145","messageId":"146","endLine":47,"endColumn":96,"suggestions":"155"},{"ruleId":"143","severity":1,"message":"144","line":47,"column":112,"nodeType":"145","messageId":"146","endLine":47,"endColumn":113,"suggestions":"156"},{"ruleId":"143","severity":1,"message":"148","line":47,"column":120,"nodeType":"145","messageId":"146","endLine":47,"endColumn":121,"suggestions":"157"},{"ruleId":"143","severity":1,"message":"144","line":55,"column":26,"nodeType":"145","messageId":"146","endLine":55,"endColumn":27,"suggestions":"158"},{"ruleId":"143","severity":1,"message":"148","line":55,"column":34,"nodeType":"145","messageId":"146","endLine":55,"endColumn":35,"suggestions":"159"},{"ruleId":"143","severity":1,"message":"144","line":55,"column":50,"nodeType":"145","messageId":"146","endLine":55,"endColumn":51,"suggestions":"160"},{"ruleId":"143","severity":1,"message":"148","line":55,"column":58,"nodeType":"145","messageId":"146","endLine":55,"endColumn":59,"suggestions":"161"},{"ruleId":"143","severity":1,"message":"148","line":55,"column":67,"nodeType":"145","messageId":"146","endLine":55,"endColumn":68,"suggestions":"162"},{"ruleId":"143","severity":1,"message":"148","line":55,"column":71,"nodeType":"145","messageId":"146","endLine":55,"endColumn":72,"suggestions":"163"},{"ruleId":"143","severity":1,"message":"144","line":55,"column":87,"nodeType":"145","messageId":"146","endLine":55,"endColumn":88,"suggestions":"164"},{"ruleId":"143","severity":1,"message":"148","line":55,"column":95,"nodeType":"145","messageId":"146","endLine":55,"endColumn":96,"suggestions":"165"},{"ruleId":"143","severity":1,"message":"144","line":55,"column":112,"nodeType":"145","messageId":"146","endLine":55,"endColumn":113,"suggestions":"166"},{"ruleId":"143","severity":1,"message":"148","line":55,"column":120,"nodeType":"145","messageId":"146","endLine":55,"endColumn":121,"suggestions":"167"},{"ruleId":"168","severity":1,"message":"169","line":48,"column":8,"nodeType":"170","endLine":48,"endColumn":10,"suggestions":"171"},{"ruleId":"136","severity":1,"message":"172","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":14},{"ruleId":"136","severity":1,"message":"173","line":6,"column":25,"nodeType":"138","messageId":"139","endLine":6,"endColumn":35},{"ruleId":"174","severity":1,"message":"175","line":78,"column":34,"nodeType":"176","messageId":"177","endLine":78,"endColumn":36},{"ruleId":"174","severity":1,"message":"178","line":213,"column":62,"nodeType":"176","messageId":"177","endLine":213,"endColumn":64},{"ruleId":"174","severity":1,"message":"178","line":221,"column":62,"nodeType":"176","messageId":"177","endLine":221,"endColumn":64},{"ruleId":"174","severity":1,"message":"178","line":228,"column":62,"nodeType":"176","messageId":"177","endLine":228,"endColumn":64},{"ruleId":"174","severity":1,"message":"178","line":29,"column":41,"nodeType":"176","messageId":"177","endLine":29,"endColumn":43},{"ruleId":"168","severity":1,"message":"179","line":37,"column":8,"nodeType":"170","endLine":37,"endColumn":10,"suggestions":"180"},{"ruleId":"136","severity":1,"message":"172","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":14},{"ruleId":"136","severity":1,"message":"181","line":3,"column":10,"nodeType":"138","messageId":"139","endLine":3,"endColumn":24},{"ruleId":"136","severity":1,"message":"182","line":3,"column":26,"nodeType":"138","messageId":"139","endLine":3,"endColumn":35},{"ruleId":"136","severity":1,"message":"183","line":4,"column":10,"nodeType":"138","messageId":"139","endLine":4,"endColumn":15},{"ruleId":"136","severity":1,"message":"184","line":13,"column":11,"nodeType":"138","messageId":"139","endLine":13,"endColumn":23},{"ruleId":"136","severity":1,"message":"185","line":23,"column":20,"nodeType":"138","messageId":"139","endLine":23,"endColumn":29},{"ruleId":"136","severity":1,"message":"186","line":24,"column":12,"nodeType":"138","messageId":"139","endLine":24,"endColumn":21},{"ruleId":"136","severity":1,"message":"187","line":24,"column":23,"nodeType":"138","messageId":"139","endLine":24,"endColumn":35},{"ruleId":"136","severity":1,"message":"188","line":25,"column":25,"nodeType":"138","messageId":"139","endLine":25,"endColumn":39},{"ruleId":"174","severity":1,"message":"178","line":40,"column":29,"nodeType":"176","messageId":"177","endLine":40,"endColumn":31},{"ruleId":"168","severity":1,"message":"189","line":47,"column":8,"nodeType":"170","endLine":47,"endColumn":10,"suggestions":"190"},{"ruleId":"174","severity":1,"message":"178","line":101,"column":62,"nodeType":"176","messageId":"177","endLine":101,"endColumn":64},{"ruleId":"174","severity":1,"message":"178","line":110,"column":62,"nodeType":"176","messageId":"177","endLine":110,"endColumn":64},{"ruleId":"174","severity":1,"message":"178","line":118,"column":62,"nodeType":"176","messageId":"177","endLine":118,"endColumn":64},{"ruleId":"136","severity":1,"message":"172","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":14},{"ruleId":"136","severity":1,"message":"191","line":7,"column":5,"nodeType":"138","messageId":"139","endLine":7,"endColumn":18},{"ruleId":"174","severity":1,"message":"178","line":44,"column":29,"nodeType":"176","messageId":"177","endLine":44,"endColumn":31},{"ruleId":"168","severity":1,"message":"189","line":52,"column":8,"nodeType":"170","endLine":52,"endColumn":10,"suggestions":"192"},{"ruleId":"174","severity":1,"message":"175","line":90,"column":34,"nodeType":"176","messageId":"177","endLine":90,"endColumn":36},{"ruleId":"174","severity":1,"message":"178","line":222,"column":62,"nodeType":"176","messageId":"177","endLine":222,"endColumn":64},{"ruleId":"174","severity":1,"message":"178","line":230,"column":62,"nodeType":"176","messageId":"177","endLine":230,"endColumn":64},{"ruleId":"174","severity":1,"message":"178","line":237,"column":62,"nodeType":"176","messageId":"177","endLine":237,"endColumn":64},"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'ForgetPasswordPage' is defined but never used.","'user' is assigned a value but never used.","'formData' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["193","194"],"Unnecessary escape character: \\\".",["195","196"],["197","198"],["199","200"],["201","202"],["203","204"],["205","206"],["207","208"],["209","210"],["211","212"],["213","214"],["215","216"],["217","218"],["219","220"],["221","222"],["223","224"],["225","226"],["227","228"],["229","230"],["231","232"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'navigate', and 'toastOptions'. Either include them or remove the dependency array.","ArrayExpression",["233"],"'Link' is defined but never used.","'GetUserAPI' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["234"],"'PlusCircleIcon' is defined but never used.","'TrashIcon' is defined but never used.","'toast' is defined but never used.","'toastOptions' is assigned a value but never used.","'setOnEdit' is assigned a value but never used.","'textField' is assigned a value but never used.","'setTextField' is assigned a value but never used.","'setEditedField' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'navigate'. Either include them or remove the dependency array.",["235"],"'CreateFormAPI' is defined but never used.",["236"],{"messageId":"237","fix":"238","desc":"239"},{"messageId":"240","fix":"241","desc":"242"},{"messageId":"237","fix":"243","desc":"239"},{"messageId":"240","fix":"244","desc":"242"},{"messageId":"237","fix":"245","desc":"239"},{"messageId":"240","fix":"246","desc":"242"},{"messageId":"237","fix":"247","desc":"239"},{"messageId":"240","fix":"248","desc":"242"},{"messageId":"237","fix":"249","desc":"239"},{"messageId":"240","fix":"250","desc":"242"},{"messageId":"237","fix":"251","desc":"239"},{"messageId":"240","fix":"252","desc":"242"},{"messageId":"237","fix":"253","desc":"239"},{"messageId":"240","fix":"254","desc":"242"},{"messageId":"237","fix":"255","desc":"239"},{"messageId":"240","fix":"256","desc":"242"},{"messageId":"237","fix":"257","desc":"239"},{"messageId":"240","fix":"258","desc":"242"},{"messageId":"237","fix":"259","desc":"239"},{"messageId":"240","fix":"260","desc":"242"},{"messageId":"237","fix":"261","desc":"239"},{"messageId":"240","fix":"262","desc":"242"},{"messageId":"237","fix":"263","desc":"239"},{"messageId":"240","fix":"264","desc":"242"},{"messageId":"237","fix":"265","desc":"239"},{"messageId":"240","fix":"266","desc":"242"},{"messageId":"237","fix":"267","desc":"239"},{"messageId":"240","fix":"268","desc":"242"},{"messageId":"237","fix":"269","desc":"239"},{"messageId":"240","fix":"270","desc":"242"},{"messageId":"237","fix":"271","desc":"239"},{"messageId":"240","fix":"272","desc":"242"},{"messageId":"237","fix":"273","desc":"239"},{"messageId":"240","fix":"274","desc":"242"},{"messageId":"237","fix":"275","desc":"239"},{"messageId":"240","fix":"276","desc":"242"},{"messageId":"237","fix":"277","desc":"239"},{"messageId":"240","fix":"278","desc":"242"},{"messageId":"237","fix":"279","desc":"239"},{"messageId":"240","fix":"280","desc":"242"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"285","fix":"287"},"removeEscape",{"range":"288","text":"289"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"290","text":"291"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"292","text":"289"},{"range":"293","text":"291"},{"range":"294","text":"289"},{"range":"295","text":"291"},{"range":"296","text":"289"},{"range":"297","text":"291"},{"range":"298","text":"289"},{"range":"299","text":"291"},{"range":"300","text":"289"},{"range":"301","text":"291"},{"range":"302","text":"289"},{"range":"303","text":"291"},{"range":"304","text":"289"},{"range":"305","text":"291"},{"range":"306","text":"289"},{"range":"307","text":"291"},{"range":"308","text":"289"},{"range":"309","text":"291"},{"range":"310","text":"289"},{"range":"311","text":"291"},{"range":"312","text":"289"},{"range":"313","text":"291"},{"range":"314","text":"289"},{"range":"315","text":"291"},{"range":"316","text":"289"},{"range":"317","text":"291"},{"range":"318","text":"289"},{"range":"319","text":"291"},{"range":"320","text":"289"},{"range":"321","text":"291"},{"range":"322","text":"289"},{"range":"323","text":"291"},{"range":"324","text":"289"},{"range":"325","text":"291"},{"range":"326","text":"289"},{"range":"327","text":"291"},{"range":"328","text":"289"},{"range":"329","text":"291"},"Update the dependencies array to be: [id, navigate, toastOptions]",{"range":"330","text":"331"},"Update the dependencies array to be: [navigate]",{"range":"332","text":"333"},"Update the dependencies array to be: [id, navigate]",{"range":"334","text":"335"},{"range":"336","text":"335"},[1518,1519],"",[1518,1518],"\\",[1526,1527],[1526,1526],[1542,1543],[1542,1542],[1550,1551],[1550,1550],[1559,1560],[1559,1559],[1563,1564],[1563,1563],[1579,1580],[1579,1579],[1587,1588],[1587,1587],[1604,1605],[1604,1604],[1612,1613],[1612,1612],[1745,1746],[1745,1745],[1753,1754],[1753,1753],[1769,1770],[1769,1769],[1777,1778],[1777,1777],[1786,1787],[1786,1786],[1790,1791],[1790,1790],[1806,1807],[1806,1806],[1814,1815],[1814,1814],[1831,1832],[1831,1831],[1839,1840],[1839,1839],[1520,1522],"[id, navigate, toastOptions]",[1298,1300],"[navigate]",[1695,1697],"[id, navigate]",[1783,1785]]